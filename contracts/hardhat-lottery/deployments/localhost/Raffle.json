{
  "address": "0x71C95911E9a5D330f4D621842EC243EE1343292e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subcriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__LowETHAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestRandomWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x508af6d4d545f40e7b782b45cbc4ba105c8158e18d0f6221d9e7bd8e30938e86",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0x71C95911E9a5D330f4D621842EC243EE1343292e",
    "transactionIndex": 0,
    "gasUsed": "1127670",
    "logsBloom": "0x
    "blockHash": "0xf0a08075fad4625ee9f27f7135de31a339b2d71b7b68525f67fd4ae5b3c2d524",
    "transactionHash": "0x508af6d4d545f40e7b782b45cbc4ba105c8158e18d0f6221d9e7bd8e30938e86",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "1127670",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8464135c8F25Da09e49BC8782676a84730C318bC",
    "100000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "8f704b1e4296e9b7969c3dee33f46e8a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subcriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__LowETHAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpKeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestRandomWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle__LowETHAmount();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpKeepNotNeeded(\\n    uint256 currBalance,\\n    uint256 numPlayers,\\n    uint256 raffleState\\n);\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    // Enums\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    // State variables\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_keyHash;\\n    uint64 private immutable i_subcriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // Lottery Variables\\n    address s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint256 private immutable i_interval;\\n    uint256 private s_lastTimeStamp;\\n\\n    // Events\\n    event RaffleEnter(address indexed player);\\n    event RequestRandomWinner(uint256 indexed requestId);\\n    event WinnerPicked(address winner);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 entranceFee,\\n        bytes32 keyHash,\\n        uint64 subcriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_entranceFee = entranceFee;\\n        i_keyHash = keyHash;\\n        i_subcriptionId = subcriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) revert Raffle__LowETHAmount();\\n        if (s_raffleState != RaffleState.OPEN) revert Raffle__NotOpen();\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded)\\n            revert Raffle__UpKeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_keyHash,\\n            i_subcriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestRandomWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /*requestId*/\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) revert Raffle__TransferFailed();\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    // Pure and get functions\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getTotalPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n}\\n\",\"keccak256\":\"0x64365ae65fd53c85f5c192d05f9a5ce78030e08cdd3780f87428a4069afcdf47\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200169b3803806200169b833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508460a081815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516112d3620003c860003960006106a7015260006105720152600061054f0152600061052e015260006104f20152600081816101dc01526102c2015260008181610202015261025601526112d36000f3fe60806040526004361061007b5760003560e01c80634585e33b1161004e5780634585e33b14610109578063473f1ddc146101325780636e04ff0d1461015d578063e55ae4e81461019b5761007b565b806309bc33a7146100805780631fe543e3146100ab5780632cfcc539146100d45780634529cae7146100de575b600080fd5b34801561008c57600080fd5b506100956101d8565b6040516100a29190610a3d565b60405180910390f35b3480156100b757600080fd5b506100d260048036038101906100cd9190610bf1565b610200565b005b6100dc6102c0565b005b3480156100ea57600080fd5b506100f361042f565b6040516101009190610a3d565b60405180910390f35b34801561011557600080fd5b50610130600480360381019061012b9190610ca8565b61043b565b005b34801561013e57600080fd5b5061014761063a565b6040516101549190610d36565b60405180910390f35b34801561016957600080fd5b50610184600480360381019061017f9190610e06565b610664565b604051610192929190610ef2565b60405180910390f35b3480156101a757600080fd5b506101c260048036038101906101bd9190610f22565b610711565b6040516101cf9190610d36565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102b257337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016102a9929190610f4f565b60405180910390fd5b6102bc8282610758565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561031a576040517fe53a851c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561032e5761032d610f78565b5b600160149054906101000a900460ff1660018111156103505761034f610f78565b5b14610387576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60008080549050905090565b600061045560405180602001604052806000815250610664565b509050806104c45747600080549050600160149054906101000a900460ff16600181111561048657610485610f78565b5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016104bb93929190610fa7565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104e9576104e8610f78565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105b3959493929190611056565b602060405180830381600087803b1580156105cd57600080fd5b505af11580156105e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060591906110be565b9050807f6700fef9fd9c98d6e3060eecfb082ea7ad01c71a1fbfdc8eaab73abf937ff3b260405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060606000600160149054906101000a900460ff16600181111561068c5761068b610f78565b5b600060018111156106a05761069f610f78565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106d4919061111a565b119050600080600080549050119050600080471190508380156106f45750825b80156106fd5750815b80156107065750805b955050505050915091565b60008082815481106107265761072561114e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106107735761077261114e565b5b602002602001015161078591906111ac565b9050600080828154811061079c5761079b61114e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156108305761082f610f78565b5b0217905550600067ffffffffffffffff8111156108505761084f610aae565b5b60405190808252806020026020018201604052801561087e5781602001602082028036833780820191505090505b506000908051906020019061089492919061097d565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff16476040516108c29061120e565b60006040518083038185875af1925050503d80600081146108ff576040519150601f19603f3d011682016040523d82523d6000602084013e610904565b606091505b505090508061093f576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df8260405161096e9190611282565b60405180910390a15050505050565b8280548282559060005260206000209081019282156109f6579160200282015b828111156109f55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061099d565b5b509050610a039190610a07565b5090565b5b80821115610a20576000816000905550600101610a08565b5090565b6000819050919050565b610a3781610a24565b82525050565b6000602082019050610a526000830184610a2e565b92915050565b6000604051905090565b600080fd5b600080fd5b610a7581610a24565b8114610a8057600080fd5b50565b600081359050610a9281610a6c565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ae682610a9d565b810181811067ffffffffffffffff82111715610b0557610b04610aae565b5b80604052505050565b6000610b18610a58565b9050610b248282610add565b919050565b600067ffffffffffffffff821115610b4457610b43610aae565b5b602082029050602081019050919050565b600080fd5b6000610b6d610b6884610b29565b610b0e565b90508083825260208201905060208402830185811115610b9057610b8f610b55565b5b835b81811015610bb95780610ba58882610a83565b845260208401935050602081019050610b92565b5050509392505050565b600082601f830112610bd857610bd7610a98565b5b8135610be8848260208601610b5a565b91505092915050565b60008060408385031215610c0857610c07610a62565b5b6000610c1685828601610a83565b925050602083013567ffffffffffffffff811115610c3757610c36610a67565b5b610c4385828601610bc3565b9150509250929050565b600080fd5b60008083601f840112610c6857610c67610a98565b5b8235905067ffffffffffffffff811115610c8557610c84610c4d565b5b602083019150836001820283011115610ca157610ca0610b55565b5b9250929050565b60008060208385031215610cbf57610cbe610a62565b5b600083013567ffffffffffffffff811115610cdd57610cdc610a67565b5b610ce985828601610c52565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d2082610cf5565b9050919050565b610d3081610d15565b82525050565b6000602082019050610d4b6000830184610d27565b92915050565b600080fd5b600067ffffffffffffffff821115610d7157610d70610aae565b5b610d7a82610a9d565b9050602081019050919050565b82818337600083830152505050565b6000610da9610da484610d56565b610b0e565b905082815260208101848484011115610dc557610dc4610d51565b5b610dd0848285610d87565b509392505050565b600082601f830112610ded57610dec610a98565b5b8135610dfd848260208601610d96565b91505092915050565b600060208284031215610e1c57610e1b610a62565b5b600082013567ffffffffffffffff811115610e3a57610e39610a67565b5b610e4684828501610dd8565b91505092915050565b60008115159050919050565b610e6481610e4f565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ea4578082015181840152602081019050610e89565b83811115610eb3576000848401525b50505050565b6000610ec482610e6a565b610ece8185610e75565b9350610ede818560208601610e86565b610ee781610a9d565b840191505092915050565b6000604082019050610f076000830185610e5b565b8181036020830152610f198184610eb9565b90509392505050565b600060208284031215610f3857610f37610a62565b5b6000610f4684828501610a83565b91505092915050565b6000604082019050610f646000830185610d27565b610f716020830184610d27565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000606082019050610fbc6000830186610a2e565b610fc96020830185610a2e565b610fd66040830184610a2e565b949350505050565b6000819050919050565b610ff181610fde565b82525050565b600067ffffffffffffffff82169050919050565b61101481610ff7565b82525050565b600061ffff82169050919050565b6110318161101a565b82525050565b600063ffffffff82169050919050565b61105081611037565b82525050565b600060a08201905061106b6000830188610fe8565b611078602083018761100b565b6110856040830186611028565b6110926060830185611047565b61109f6080830184611047565b9695505050505050565b6000815190506110b881610a6c565b92915050565b6000602082840312156110d4576110d3610a62565b5b60006110e2848285016110a9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061112582610a24565b915061113083610a24565b925082821015611143576111426110eb565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111b782610a24565b91506111c283610a24565b9250826111d2576111d161117d565b5b828206905092915050565b600081905092915050565b50565b60006111f86000836111dd565b9150611203826111e8565b600082019050919050565b6000611219826111eb565b9150819050919050565b6000819050919050565b600061124861124361123e84610cf5565b611223565b610cf5565b9050919050565b600061125a8261122d565b9050919050565b600061126c8261124f565b9050919050565b61127c81611261565b82525050565b60006020820190506112976000830184611273565b9291505056fea26469706673582212204d74f37d5c49058dcfbd6bad802753bbb3517d3f4f0677ddb2e1feaad172b46464736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80634585e33b1161004e5780634585e33b14610109578063473f1ddc146101325780636e04ff0d1461015d578063e55ae4e81461019b5761007b565b806309bc33a7146100805780631fe543e3146100ab5780632cfcc539146100d45780634529cae7146100de575b600080fd5b34801561008c57600080fd5b506100956101d8565b6040516100a29190610a3d565b60405180910390f35b3480156100b757600080fd5b506100d260048036038101906100cd9190610bf1565b610200565b005b6100dc6102c0565b005b3480156100ea57600080fd5b506100f361042f565b6040516101009190610a3d565b60405180910390f35b34801561011557600080fd5b50610130600480360381019061012b9190610ca8565b61043b565b005b34801561013e57600080fd5b5061014761063a565b6040516101549190610d36565b60405180910390f35b34801561016957600080fd5b50610184600480360381019061017f9190610e06565b610664565b604051610192929190610ef2565b60405180910390f35b3480156101a757600080fd5b506101c260048036038101906101bd9190610f22565b610711565b6040516101cf9190610d36565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102b257337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016102a9929190610f4f565b60405180910390fd5b6102bc8282610758565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561031a576040517fe53a851c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561032e5761032d610f78565b5b600160149054906101000a900460ff1660018111156103505761034f610f78565b5b14610387576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60008080549050905090565b600061045560405180602001604052806000815250610664565b509050806104c45747600080549050600160149054906101000a900460ff16600181111561048657610485610f78565b5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016104bb93929190610fa7565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104e9576104e8610f78565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105b3959493929190611056565b602060405180830381600087803b1580156105cd57600080fd5b505af11580156105e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060591906110be565b9050807f6700fef9fd9c98d6e3060eecfb082ea7ad01c71a1fbfdc8eaab73abf937ff3b260405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060606000600160149054906101000a900460ff16600181111561068c5761068b610f78565b5b600060018111156106a05761069f610f78565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106d4919061111a565b119050600080600080549050119050600080471190508380156106f45750825b80156106fd5750815b80156107065750805b955050505050915091565b60008082815481106107265761072561114e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106107735761077261114e565b5b602002602001015161078591906111ac565b9050600080828154811061079c5761079b61114e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156108305761082f610f78565b5b0217905550600067ffffffffffffffff8111156108505761084f610aae565b5b60405190808252806020026020018201604052801561087e5781602001602082028036833780820191505090505b506000908051906020019061089492919061097d565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff16476040516108c29061120e565b60006040518083038185875af1925050503d80600081146108ff576040519150601f19603f3d011682016040523d82523d6000602084013e610904565b606091505b505090508061093f576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df8260405161096e9190611282565b60405180910390a15050505050565b8280548282559060005260206000209081019282156109f6579160200282015b828111156109f55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061099d565b5b509050610a039190610a07565b5090565b5b80821115610a20576000816000905550600101610a08565b5090565b6000819050919050565b610a3781610a24565b82525050565b6000602082019050610a526000830184610a2e565b92915050565b6000604051905090565b600080fd5b600080fd5b610a7581610a24565b8114610a8057600080fd5b50565b600081359050610a9281610a6c565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ae682610a9d565b810181811067ffffffffffffffff82111715610b0557610b04610aae565b5b80604052505050565b6000610b18610a58565b9050610b248282610add565b919050565b600067ffffffffffffffff821115610b4457610b43610aae565b5b602082029050602081019050919050565b600080fd5b6000610b6d610b6884610b29565b610b0e565b90508083825260208201905060208402830185811115610b9057610b8f610b55565b5b835b81811015610bb95780610ba58882610a83565b845260208401935050602081019050610b92565b5050509392505050565b600082601f830112610bd857610bd7610a98565b5b8135610be8848260208601610b5a565b91505092915050565b60008060408385031215610c0857610c07610a62565b5b6000610c1685828601610a83565b925050602083013567ffffffffffffffff811115610c3757610c36610a67565b5b610c4385828601610bc3565b9150509250929050565b600080fd5b60008083601f840112610c6857610c67610a98565b5b8235905067ffffffffffffffff811115610c8557610c84610c4d565b5b602083019150836001820283011115610ca157610ca0610b55565b5b9250929050565b60008060208385031215610cbf57610cbe610a62565b5b600083013567ffffffffffffffff811115610cdd57610cdc610a67565b5b610ce985828601610c52565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d2082610cf5565b9050919050565b610d3081610d15565b82525050565b6000602082019050610d4b6000830184610d27565b92915050565b600080fd5b600067ffffffffffffffff821115610d7157610d70610aae565b5b610d7a82610a9d565b9050602081019050919050565b82818337600083830152505050565b6000610da9610da484610d56565b610b0e565b905082815260208101848484011115610dc557610dc4610d51565b5b610dd0848285610d87565b509392505050565b600082601f830112610ded57610dec610a98565b5b8135610dfd848260208601610d96565b91505092915050565b600060208284031215610e1c57610e1b610a62565b5b600082013567ffffffffffffffff811115610e3a57610e39610a67565b5b610e4684828501610dd8565b91505092915050565b60008115159050919050565b610e6481610e4f565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ea4578082015181840152602081019050610e89565b83811115610eb3576000848401525b50505050565b6000610ec482610e6a565b610ece8185610e75565b9350610ede818560208601610e86565b610ee781610a9d565b840191505092915050565b6000604082019050610f076000830185610e5b565b8181036020830152610f198184610eb9565b90509392505050565b600060208284031215610f3857610f37610a62565b5b6000610f4684828501610a83565b91505092915050565b6000604082019050610f646000830185610d27565b610f716020830184610d27565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000606082019050610fbc6000830186610a2e565b610fc96020830185610a2e565b610fd66040830184610a2e565b949350505050565b6000819050919050565b610ff181610fde565b82525050565b600067ffffffffffffffff82169050919050565b61101481610ff7565b82525050565b600061ffff82169050919050565b6110318161101a565b82525050565b600063ffffffff82169050919050565b61105081611037565b82525050565b600060a08201905061106b6000830188610fe8565b611078602083018761100b565b6110856040830186611028565b6110926060830185611047565b61109f6080830184611047565b9695505050505050565b6000815190506110b881610a6c565b92915050565b6000602082840312156110d4576110d3610a62565b5b60006110e2848285016110a9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061112582610a24565b915061113083610a24565b925082821015611143576111426110eb565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111b782610a24565b91506111c283610a24565b9250826111d2576111d161117d565b5b828206905092915050565b600081905092915050565b50565b60006111f86000836111dd565b9150611203826111e8565b600082019050919050565b6000611219826111eb565b9150819050919050565b6000819050919050565b600061124861124361123e84610cf5565b611223565b610cf5565b9050919050565b600061125a8261122d565b9050919050565b600061126c8261124f565b9050919050565b61127c81611261565b82525050565b60006020820190506112976000830184611273565b9291505056fea26469706673582212204d74f37d5c49058dcfbd6bad802753bbb3517d3f4f0677ddb2e1feaad172b46464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 196,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 213,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 216,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)191"
      },
      {
        "astId": 220,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)191": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}